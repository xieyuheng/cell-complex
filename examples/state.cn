state-t : (type type) -> type
state-t (s a) = (s) -> [s a]

state-monad : (type) -> monad-t
state-monad (s) = monad-c {
  fun-t = state-t (s)

  map : ((a) -> b, state-t (s a))
    -> state-t (s b)
  map : (
    (a) -> b
    (s) -> [s a]
  ) -> (s) -> [s b]
  map (f m) = (s) => {
    [1st (m (s))
     f (2nd (m (s)))]
  }

  pure : (t) -> state-t (s t)
  pure : (t) -> (s) -> [s t]
  pure (v) = (s) => {
    [s v]
  }

  bind : (fun-t (a) (a)) -> fun-t (b) -> fun-t (b)
  bind : (state-t (s a) (a) -> state-t (s b)) -> state-t (s b)
  bind : (
    (s) -> [s a]
    (a) -> (s) -> [s b]
  ) -> (s) -> [s b]
  bind (m f) = (s) => {
    f (2st (m (s))) (1st (m (s)))
  }
}
