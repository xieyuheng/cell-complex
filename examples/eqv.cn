eqv_t : type
eqv_t = conj {
  (lhs rhs) : t
  lhs = rhs
}

eqv_apply : (
  fun : (a) -> b
  eqv_t (x y)
) -> eqv_t (fun (x) fun (y))
eqv_apply (_ _) = eqv_c

eqv_swap : (eqv_t (x y)) -> eqv_t (y x)
eqv_swap (_) = eqv_c

eqv_compose : (eqv_t (x y) eqv_t (y z)) -> eqv_t (x z)
eqv_compose (_ _) = eqv_c
