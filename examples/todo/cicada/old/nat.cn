class zero_t ()

class succ_t (
  prev : nat_t
)

union nat_t () [
  zero_t
  succ_t
] {}

add (nat_t nat_t) : nat_t
add (x y) = x case {
  zero_t => y
  succ_t => succ_c (add (x.prev y))
}

mul (nat_t nat_t) : nat_t
mul (x y) = x case {
  zero_t => zero_c
  succ_t => add (y (mul (x.prev y)))
}

factorial (nat_t) : nat_t
factorial (x) = x case {
  zero_t => succ_c (zero_c)
  succ_t => mul (x (factorial (x.prev)))
}

even_p (x) : bool_t
even_p (x) = x case {
  zero_t => true_c
  succ_t => x case {
    zero_t => false_c
    succ_t => even_p (x.prev.prev)
  }
}

union nat_even_t (
  n : nat_t
) [
  zero_even_t
  even_plus_two_even_t
]

class zero_even_t (
  n : nat_t
  n = zero_c
)

class even_plus_two_even_t (
  n : nat_t
  m : nat_t
  prev : nat_even_t (m)
  n = succ_c (succ_c (m))
)

two_even : nat_even_t (succ_c (succ_c (zero_c)))
two_even = even_plus_two_even_c (
  n = succ_c (succ_c (zero_c))
  m = zero_c
  prev = zero_even_c (m)
)

// [todo]

add_assoc : (x : nat_t, y : nat_t, z : nat_t) ->
  add (add (x y) z) == add (x add (y z))

add_assoc (x y z) = x case {
  zero_t => eqv_c
  succ_t => eqv_apply (
    succ_c add_assoc (x.prev y z))
}

add_commu : (x : nat_t, y : nat_t) -> add (x y) == add (y x)
add_commu (x y) = x case {
  zero_t => add_zero_commu (y)
  succ_t => eqv_compose (
    eqv_apply (succ_c add_commu (x.prev y))
    add_succ_commu (y x.prev))
}

add_zero_commu : (x : nat_t) ->
  add (zero_c x) == add (x zero_c)
add_zero_commu (x) = x case {
  zero_t => eqv_c
  succ_t => eqv_apply (
    succ_c add_zero_commu (x.prev))
}


note {
  to make it easier to prove eqv_t
  I want to be able to reduce
  1. the eqv_t to be proved
  2. the eqv_c constructing

  in `x case succ_t` of the above example

  the eqv_t to be proved is
  eqv_t (
    add (zero_c x) >= x
    add (x zero_c) >= succ_c (add (x.prev zero_c))
  )

  the eqv_c constructing is
  eqv_apply (succ_c add_zero_commu (x.prev)) :
  eqv_t (
    succ_c (add (zero_c x.prev)) >= succ_c (x.prev) >= x
    succ_c (add (x.prev zero_c))
  )

  only after many `>=`s
  do we explicitly see that eqv_c actually fulfill eqv_t

  maybe we need let the verifier to explicitly choose
  which reduction to perform

  otherwise we would need to prove reductions converge to
  unique normal form (or unifiable form)

  maybe we'd better internalize eqv_t
  instead of defining it as a type in our language

  advantage of doing so is that it works
  not only for the concrete class eqv_t
  but also for any equivalent relations

  it might be viewed as an example of
  defining a little game of eqv_t in our language of games
}


add_succ_commu_1 : ((x y) : nat_t)
  -> eqv_t (
       add (succ_c (x) y)
       succ_c (add (x y)))
add_succ_commu_1 (x y) = {
  x case {
    zero_t => eqv_c
    succ_t => eqv_apply (
      succ_c add_succ_commu_1 (x.prev y))
  }
}


add_succ_commu_2 : ((x y) : nat_t)
  -> eqv_t (
       add (y succ_c (x))
       succ_c (add (x y)))
add_succ_commu_2 (x y) = {
  x case {
    zero_t => eqv_c
    succ_t => eqv_apply (
      succ_c add_succ_commu_2 (x.prev y))
  }
}


nat_lteq_t : type
nat_lteq_t = disj {
  [ zero_lteq_t
    succ_lteq_t ]
  (l r) : nat_t
}


zero_lteq_t : type
zero_lteq_t = conj {
  (l r) : nat_t
  l = zero_c
}

succ_lteq_t : type
succ_lteq_t = conj {
  (l r) : nat_t
  prev : nat_lteq_t (x y)
  l = succ_c (x)
  r = succ_c (y)
}

nat_non_negative : (n : nat_t) -> nat_lteq_t (zero_c n)
nat_non_negative = zero_lteq_c

nat_lteq_reflexive : (n : nat_t) -> nat_lteq_t (n n)
nat_lteq_reflexive (n) = {
  n case {
    zero_t => zero_lteq_c
    succ_t => succ_lteq_c (nat_lteq_reflexive (n.prev))
  }
}

nat_lteq_transitive : (
  nat_lteq_t (a b)
  nat_lteq_t (b c)
) -> nat_lteq_t (a c)
nat_lteq_transitive (x y) = {
  x case {
    zero_lteq_t => zero_lteq_c
    succ_lteq_t => succ_lteq_c (nat_lteq_transitive (x.prev y.prev))
  }
}

nat_lt_t : (nat_t nat_t) -> type
nat_lt_t (l r) = nat_lteq_t (succ_c (l) r)

nat_archimedean_property : (x : nat_t)
  -> [y : nat_t, nat_lt_t (x y)]
nat_archimedean_property x =
  [succ_c (x) nat_lteq_reflexive (succ_c (x))]

nat_order_category : category_t
nat_order_category = category_c {
  object_t = nat_t
  arrow_t = nat_lteq_t
  arrow_eqv_t = eqv_t

  identity : (a :: nat_t)
    -> nat_lteq_t (a a)
  identity = nat_lteq_reflexive (a)

  compose = nat_lteq_transitive

  identity_neutral_left (x) = {
    x case {
      zero_lteq_t => eqv_c
      succ_lteq_t => eqv_apply (
        succ_lteq_c identity_neutral_left (x.prev))
    }
  }

  identity_neutral_righ (x) = {
    x case {
      zero_lteq_t => eqv_c
      succ_lteq_t => eqv_apply (
        succ_lteq_c identity_neutral_righ (x.prev))
    }
  }

  compose_assoc (f g h) = {
    [f g h] case {
      [zero_lteq_t _ _] => eqv_c
      [succ_lteq_t succ_lteq_t succ_lteq_t] =>
        eqv_apply (
          succ_lteq_c
          compose_assoc (f.prev g.prev h.prev))
    }
  }
}
