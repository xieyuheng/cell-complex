// [todo]
// - use explicit argument instead of logic variables
// - specify the game of disj and conj
//   -- to see if it agree with hintikka

// - syntax for game plays
// - example games about nat list vect

nat_t = disj (
    zero_t
    succ_t
) {}

zero_t = conj {}

succ_t = conj {
    prev : nat_t
}

nat_add_t = disj (
    zero_add_t
    succ_add_t
) {
    a : nat_t
    b : nat_t
    c : nat_t
}

zero_add_t = conj {
    a : nat_t
    b : nat_t
    c : nat_t
    a = zero_c
    c = b
}

succ_add_t = conj {
    a : nat_t
    b : nat_t
    c : nat_t
    a = succ_c (:a)
    c = succ_c (:c)
    prev : nat_add_t (:a b :c)
}

assert! {
    nat_add_t (zero_c zero_c zero_c)
}

assert! {
    nat_add_t (zero_c succ_c (zero_c) succ_c (zero_c))
}

assert! {
    nat_add_t (succ_c (zero_c) zero_c succ_c (zero_c))
}

// query! (10) {
//     nat_add_t (
//         zero_c
//         :zero
//         zero_c)
// }

// query! (10) {
//     nat_add_t (
//         :zero
//         zero_c
//         zero_c)
// }

// query! (10) {
//     nat_add_t (
//         zero_c
//         zero_c
//         :zero)
// }

// query! (10) {
//     nat_add_t (
//         :x
//         succ_c (zero_c)
//         succ_c (succ_c (succ_c (zero_c))))
// }

// search! (1) {
//     nat_add_t (
//         succ_c (zero_c)
//         :x
//         succ_c (succ_c (succ_c (succ_c (zero_c)))))
// }
//
// step! (1) {
//     nat_add_t (
//         succ_c (zero_c)
//         :x
//         succ_c (succ_c (succ_c (succ_c (zero_c)))))
// }

// search! (3) {
//     nat_add_t (
//         succ_c (zero_c)
//         :x
//         succ_c (succ_c (succ_c (succ_c (zero_c)))))
// }
//
// query! (10) {
//     nat_add_t (
//         succ_c (zero_c)
//         succ_c (:x)
//         succ_c (succ_c (succ_c (zero_c))))
// }

// query! (10) {
//     nat_add_t (
//         :y
//         :x
//         succ_c (succ_c (succ_c (zero_c))))
// }

nat_even_t = disj (
    zero_even_t
    even_plus_two_even_t
) {
    nat : nat_t
}

zero_even_t = conj {
    nat : nat_t
    nat = zero_c
}

even_plus_two_even_t = conj {
    nat : nat_t
    prev : nat_even_t (:m)
    nat = succ_c (succ_c (:m))
}

assert! {
    nat_even_t (zero_c)
}

assert! {
    nat_even_t (succ_c (succ_c (zero_c)))
}

assert_not! {
    nat_even_t (succ_c (zero_c))
}

list_t = disj (
    null_t
    cons_t
) {
    t : type
}

null_t = conj {
    t : type
}

cons_t = conj {
    t : type
    car : t
    cdr : list_t (t)
}

list_length_t = disj (
    zero_length_t
    succ_length_t
) {
    list : list_t (:t)
    length : nat_t
}

zero_length_t = conj {
    list : list_t (:t)
    length : nat_t
    list = null_c
    length = zero_c
}

succ_length_t = conj {
    list : list_t (:t)
    length : nat_t
    prev : list_length_t (:cdr :n)
    list = cons_c (:t :x :cdr)
    length = succ_c (:n)
}

assert! {
    list_length_t (
        null_c
        zero_c)
}

assert! {
    list_length_t {
        list = cons_c (nat_t zero_c null_c)
        length = succ_c (zero_c)
    }
}

assert! {
    list_length_t {
        list = cons_c (nat_t zero_c cons_c (zero_c null_c))
        length = succ_c (succ_c (zero_c))
    }
}

assert_not! {
    list_length_t {
        list = cons_c (nat_t zero_c null_c)
        length = succ_c (succ_c (zero_c))
    }
}

assert! {
    list_length_t {
        list = cons_c (nat_t zero_c cons_c (zero_c null_c))
        length = :n
    }
}

assert! {
    list_length_t {
        list = :l
        length = :n
    }
}

list_append_t = disj (
    zero_append_t
    succ_append_t
) {
    ante : list_t (:t)
    succ : list_t (:t)
    result : list_t (:t)
}

zero_append_t = conj {
    ante : list_t (:t)
    succ : list_t (:t)
    result : list_t (:t)
    ante = null_c
    result = succ
}

succ_append_t = conj {
    ante : list_t (:t)
    succ : list_t (:t)
    result : list_t (:t)
    prev : list_append_t (:cdr succ :result_cdr)
    ante = cons_c (:t :car :cdr)
    result = cons_c (:t :car :result_cdr)
}

search! (2) {
    list_append_t (:ante :succ :result)
}

vect_t = disj (
    null_vect_t
    cons_vect_t
) {
    t : type
    length : nat_t
}

null_vect_t = conj {
    t : type
    length : nat_t
    length = zero_c
}

cons_vect_t = conj {
    t : type
    length : nat_t
    car : t
    cdr : vect_t (t :n)
    length = succ_c (:n)
}

// search! (2) {
//     bool_t
// }

// search! (3) {
//     nat_t
// }

// search! (3) {
//     list_t (nat_t)
// }

// search! (3) {
//     list_t (list_t (nat_t))
// }
