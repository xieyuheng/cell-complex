state_t : (type type) -> type
state_t (s a) = (s) -> [s a]

state_monad : (type) -> monad_t
state_monad (s) = monad_c {
  fun_t = state_t (s)

  map : ((a) -> b, state_t (s a))
    -> state_t (s b)
  map : (
    (a) -> b
    (s) -> [s a]
  ) -> (s) -> [s b]
  map (f m) = (s) => {
    [1st (m (s))
     f (2nd (m (s)))]
  }

  pure : (t) -> state_t (s t)
  pure : (t) -> (s) -> [s t]
  pure (v) = (s) => {
    [s v]
  }

  bind : (fun_t (a) (a)) -> fun_t (b) -> fun_t (b)
  bind : (state_t (s a) (a) -> state_t (s b)) -> state_t (s b)
  bind : (
    (s) -> [s a]
    (a) -> (s) -> [s b]
  ) -> (s) -> [s b]
  bind (m f) = (s) => {
    f (2st (m (s))) (1st (m (s)))
  }
}
