vect_t : type
vect_t = disj {
  [ null_vect_t
    cons_vect_t ]
  t : type
  length : nat_t
}

null_vect_t : type
null_vect_t = conj {
  t : type
  length : nat_t
  length = zero_c
}

cons_vect_t : type
cons_vect_t = conj {
  t : type
  length : nat_t
  car : t
  cdr : vect_t (t n)
  length = succ_c (n)
}


vect_append : (
  vect_t (t m)
  vect_t (t n)
) -> vect_t (t nat_add (m n))
vect_append (ante succ) = {
  ante case {
    null_vect_t => succ
    cons_vect_t => cons_vect_c (
      ante.car vect_append (ante.cdr succ))
  }
}


vect_map : ((a) -> b vect_t (a n)) -> vect_t (a n)
vect_map (fun list) = {
  list case {
    null_vect_t => list
    cons_vect_t => cons_vect_c (
      fun (list.car) vect_map (fun list.cdr))
  }
}
