monad-t : type
monad-t = heir {
  [ container-t ]
  pure : (t) -> fun-t (t)
  bind : (fun-t (a), (a) -> fun-t (b)) -> fun-t (b)
}

monad-t.compose : (
  (a) -> fun-t (b)
  (b) -> fun-t (c)
) -> (a) -> fun-t (c)
monad-t.compose (f g) = (a) => {
  bind (f (a) g)
}

monad-t.flatten : (fun-t (fun-t (a)))
  -> fun-t (a)
monad-t.flatten (m) = bind (m () => {})

list-monad : monad-t
list-monad = monad-c {
  pure (x) = cons-c (x null-c)
  bind (list fun) = {
    list case {
      null-t => null-c
      cons-t => list-append (fun (list.car) bind (list.cdr fun))
    }
  }
}
