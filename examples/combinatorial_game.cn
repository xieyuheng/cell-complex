class pair_t (
  this_t : type
  that_t : type
  this : this_t
  that : that_t
)

union either_t (
  this_t : type
  that_t : type
) [
  either_this_t
  either_that_t
]

class either_this_t (
  this_t : type
  that_t : type
  value : this_t
)

class either_that_t (
  this_t : type
  that_t : type
  value : that_t
)

class game_t (
  position_t : type
  choice_t : type
  L_choices : (position_t) -> list_t (choice_t)
  R_choices : (position_t) -> list_t (choice_t)
  L_move : (choice_t position_t) -> position_t
  R_move : (choice_t position_t) -> position_t
) {
  .sum : (game_t) -> game_t
  .sum = (that) => game_c {
    position_t = pair_t (this.position_t, that.position_t)
    choice_t = either_t (this.choice_t, that.choice_t)
    L_choices = (position) => list_append (
      either_this_c (this.L_choices (position.this))
      either_that_c (that.L_choices (position.that)))
    R_choices = (position) => list_append (
      either_this_c (this.R_choices (position.this))
      either_that_c (that.R_choices (position.that)))
    L_move = (choice, position) => choice case {
      either_this_t => pair_c (
        this.L_move (choice.value, position.this)
        position.that)
      either_that_t => pair_c (
        position.this
        that.L_move (choice.value, position.that))
    }
    R_move = (choice, position) => choice case {
      either_this_t => pair_c (
        this.R_move (choice.value, position.this)
        position.that)
      either_that_t => pair_c (
        position.this
        that.R_move (choice.value, position.that))
    }
  }
}
