maybe_t : type
maybe_t = disj {
  [ none_t
    just_t ]
  t : type
}

none_t : type
none_t = conj {
  t : type
}

just_t : type
just_t = conj {
  t : type
  value : t
}

maybe_container : container_t
maybe_container = container_c {
  fun_t = maybe_t
  map (fun maybe) = {
    maybe case {
      none_t => none_c
      just_t => just_c (fun (maybe.value))
    }
  }
}

maybe_monad : monad_t
maybe_monad = monad_c {
  pure = just_c
  bind (maybe fun) = {
    maybe case {
      none_t => none_c
      just_t => fun (maybe.value)
    }
  }
}
