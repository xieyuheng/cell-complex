- docs inference rules in the little typer
* normalization by evaluation
- better `error_msg_t` for `result_t <_, error_msg_t>`
- [pie] `exp.eqv`
- [maybe] nbe/simple.ts
* three kinds of expression
- expression
  value (top is constructor)
  normal form (might be neutral)
- game
  top is game constructors: record_t union_t pi_t
  only contain game constructors: record_t union_t pi_t (might be neutral)
- strategy
  strategy with explicit next step
  strategy with every steps (might be neutral)
* cicada/core
- `this_t` and `ref_t` feels not like game
  and they must also occur in strategy
  - just like "three kinds of expression"
    1. value (top is constructor)
    2. neutral (var or eliminator blocked by var)
    3. normal form (might be neutral)
  - we need our rule about `neutral`
- [TO BE SURE] becareful about `game.copy ()`
  since there might be (are there?) circle ref in game
- API of `this_t` in `record_t` and `union_t` map
  use some callback API
  a callback whose arg is the root of current game's map
- how to solve unification problem with side-effect ?
  - constrains:
    - unification only happens when `this` occurs
  - when a `this` occurs (in playing), make a ref to the field,
    and update the field by current partial game
- specify the use of `choices` in `define`
- `record_builder_t` and `union_builder_t` as `game_builder_t`
- `module.game ()` call `game_builder.start ()`
- "prelude.ts" in `std/`
- `module.use ()`
- `game.start ()` -- no `record_t` in `record_t`
  - `record_t` should only be used in `module.define`
- fix `.choices ()`
- step_t for `type-of-type.ts`
- [not yet] term change: use pause and resume instead of ref and deref
- dot.ts -- new type of game, like deep ref_t for record_t
- be sure about winning rule for players
- predicates for `game_t`, such as `end_p` `loss_p` `win_p` -- for better tests
------
- classification of regular polytope
- holding implements until finite element method and PDE
- example usages of higher order incidence relation
- graph.ts with geometry
- geometry of convex polytope
  - example of give geometry to topological structure
- how to describe edge and face so they are easy to draw ?
- a generic way to specify geometry of cell-complex
* graph
- graph without info -- for new hackenbush
- reuse cell_complex_t -- by `graph_t.as_cell_complex ()`
- find cycles of graph by spanning tree's complement edges
  - homology of general graph
* games -- for frontend jobs
- hackenbush
- dots-and-boxes
- connect-four
- go
- hackenbush editor
* cicadascript
- more examples from /old
- semantics of game plays
- example games about `nat_t` and `list_t` -- cicada/simple
- example games about `vect_t` -- cicada/core
- game semantics for the type system
- compile to js with runtime type information
  - { type: { field: <type> }, field: <value> }
- syntax and semantics which is higher order module ?
  - one syntax can be implemented by many semantics
  - one design of semantics can be used by many syntaxes
- reuse js syntax
  the syntax of js is almost enough
  we only need to do the following extensions
  - function call with named field
    `<f> (<field> = <object>)`
  - auto currying
    `f (a) (b)` == `f (a, b)`
  - no `,` in function call
    - maybe we need to limit the use of infix notation
    - maybe use newline as `,`
* algebra of cell-complex
- check equality proof
- the game of equality
- 2-dim cell-complex can be expressed purely algebraicly
  thus classification can also be expressed algebraicly
  but, for 3-dim cell-complex
  we do not have the syntax of higher algebra
* manifold classification
- another manifold_check
  - any edge occur twice
    thus when glued
    we will have not boundary
  - condition on edge_figure_t
    is weaker then condition on vertex_figure_t
    - every dimension have its element_figure_t
      the higher dimension the weaker the condition
    - maybe we should use the word "shape" instead of "figure"
      because of the use of `figure_t`
  - but this is not enough
    because of pinch points
  - how should we call this kind of weaker manifold_check ?
    pinchfold_t ?
    instead of think of name for each dimension
    we should
    | manifold_t  | weak_manifold_t (0) |
    | pinchfold_t | weak_manifold_t (1) |
    |             | weak_manifold_t (2) |
    |             | ...                 |
    pinchfold_t ?
- 2-dim manifold classification -- zip of john conway
  - can the normalization algorithm works on more than manifold_t ?
- normal forms
  - sphere: a a.rev
  - tori:
    a1 b1 a1.rev b1.rev
    a2 b2 a2.rev b2.rev
    ...
    an bn an.rev bn.rev
  - cross-caps (projective-plane):
    a1 a1
    a2 a2
    ...
    an an
    - note that
      two cross-caps is a klein_bottle
- the normalization algorithm
  1. merge faces at double occuring edge pairs
     while maintaining homeomorphic to disk
     - only double occuring pairs can be merged
       without losing information
     - this will reduce the cell-complex to the following state:
       - there are no double occuring edge pairs
       - or merging any more double occuring edge pairs
         will make it non homeomorphic to disk
         - information of non-disk-ness is encoded by edge pairs
           if we merge more the information of non-disk-ness
           will be lost
  2. reduce vertexes to one vertex
  3. make same-direction edges next to each other
  4. make opposite-direction edges ???
  5. cross-cap + torus = three cross-caps
- new im_dic_compatible_p
- new manifold_check
- new vertex_figure_t
- update cell-complex
* what knowledge is worth knowing ?
- topological and geometrical modeling
  - mesh
    - polytopal-complex
    - blender
  - clifford algebra
- physics simulation
  - differential equation & difference equation
  - finite element method -- PDE
  - direction field -- ODE
* the way to cicada language
- do not start from a "well designed" type theory
- start from the way I want to do formalize
- implement it and fix it by examples
- form a type theory at the end
* mesh
- to give geometry to cell-complex, we can
  1. generate mesh for cell-complex
  2. use affine variety of algebraic geometry
* polytope
- fourier-motzkin elimination
- simplify inequalities
- double description method
* num
- projection matrix for 1-dim subspace
  - rank one matrix
  - P.mul (P) .eq (P)
  - P.transpose () .eq (P)
- projection matrix for m-dim subspace
  - subspace represented by A
    - columns are column vectors of the subspace
  - P = A.mul (A.transpose () .mul (A) .inv ()) .mul (A.transpose ())
    - P.mul (P) .eq (P)
    - P.transpose () .eq (P)
- normal equation
- gram -- only gram
- gram-schmidt -- with normalization
  - is there a version of gram-schmidt for integer matrix ?
- num.matrix_t.positive_definite_p ()
- abstract/order.ts -- for num.ts, for polytope.ts
- use num.ts to re-imp hackenbush
* mathematical structures
- ring.cs substructure and ideal_t
- order.ts -- lattice_t, poset_t, total_t, heyting_algebra_t
* int
- linear diophantine equations with mod -- finite field
* euclid
- .diag => .main_diag
- .diag .set_diag
- convert invariant_factors to elementary_divisors
- primary_decomposition -- [rank, [[p0, n0], [p1, n1], ...]]
- chinese_remainder_theorem
* computational-science
- stiffness matrix
- circulant matrix
* polynomial
- polynomial.ts -- symbolic algebra
* panel-data
- frame_t.act & series_t.trans
- data_t slice
* optimize
- optimize frame_t and series_t by not using data_t
  but to use matrix_t and vector_t
* homology
- what is the meaning of 1 torsion_coefficients ?
* homotopy
- presentation of groupoid is the same as 2-dim cell-complex
  - by which we can calculate homology group of groupoid
  - my first aim is to
    generalize this algebraic structure for 3-dim cell-complex
  - we also want to study group representation
    i.e. find matrix group iso to given group
- groupoid of 2-dim cell-complex
  - `as_groupoid ()`
  - what is special about manifold's groupoid
- glob_t
- ht.chain_t
  - `.boundary ()`
  - `.as_group ()` -- formalize presentation of group
  - `.as_groupoid ()` -- presentation of groupoid with `ht.chain_t`
  - abelianization of `ht.chain_t` to get homology theory
    abelianization 时如何获得定向 ?
  - `.glue ()`
    我们所要处理的代数结构中的元素是 ht.chain_t
    这在于
    元素是有类型的 (或者说是有边界的)
    我们的代数结构类似於 groupoid 而不是 group
    元素之间的复合不是简单地左右相乘
    而是 沿着边界 glue
    - 我们可以从 presentation of a groupoid 入手
      研究 groupoid 对 ht.chain_t 的需要
      也就是说
      1. 放宽对元素联通性的要求
      2. 丰富 compose 为 glue
- higher_groupoid_t
* cell-complex
- we can fully encode the information of cell-complex
  by cell-valued incidence matrixes,
  - we can specialize cells for each dimension,
    for examples:
    - +1,-1 (2-dim rotation) for [2-dim, 1-dim] incidence relation
    - 2-dim rotation for [3-dim, 2-dim] incidence relation
    - 3-dim rotation for [4-dim, 3-dim] incidence relation
- how about adjacency matrix between higher order elements ?
- bounfold_check
- cell_check -- is im_dic_compatible_p enough ?
- can we encode cell-complex by graph ?
  - what is "encode something by graph" ?
    with graph label ?
- product_complex_t
- quotient_complex_t -- self-gluing
- vertex_figure_t -- 3 dim
- pure_complex_t
  an n-dimensional complex is said to be pure
  if each k cell (k < n) is a face of at least one n-dimensional cell
- boundary operator
  - the boundary of the boundary of a cell_complex_t should be zero
    even if the cell_complex_t is not a bounfold_t
* polytopal-complex
- like cell-complex
  but without self adjacency
  which simplifies the data structure
- polytopal-complex can be used as basic data structure in meshing
* geometry
- quaternion
- clifford-algebra
* combinatorial-game
- use go to test game tree searching
- why the games of logic seem like one-player game ?
- aristotle (lukasiewicz) -> de morgan -> peirce
- martin-gardner
- (paper) investigations into game semantics of logic
- surreal -- the theory of surreal number
  - theory about two-player normal-ending game
* dance
- 3 circle dance
- 4 circle dance
